[["index.html", "Computational and Software Reproduciblity Chapter 1 Prerequisites", " Computational and Software Reproduciblity Amrit Singh 2021-06-15 Chapter 1 Prerequisites This is a sample book written in Markdown. You can use anything that Pandocs Markdown supports, e.g., a math equation \\(a^2 + b^2 = c^2\\). The bookdown package can be installed from CRAN or Github: install.packages(&quot;bookdown&quot;) # or the development version # devtools::install_github(&quot;rstudio/bookdown&quot;) Remember each Rmd file contains one and only one chapter, and a chapter is defined by the first-level heading #. To compile this example to PDF, you need XeLaTeX. You are recommended to install TinyTeX (which includes XeLaTeX): https://yihui.org/tinytex/. "],["primer.html", "Chapter 2 Primer 2.1 Overview", " Chapter 2 Primer 2.1 Overview Software development principles such as containerization, version control, and automation are highly useful components of reproducible data analysis workflows (Figure 1). knitr::include_graphics(&quot;figures/overview.png&quot;) "],["cloud.html", "Chapter 3 Cloud 3.1 Introduction 3.2 Advanced", " Chapter 3 Cloud 3.1 Introduction 3.2 Advanced "],["containerization.html", "Chapter 4 Containerization 4.1 Introduction 4.2 Delete virtual environment 4.3 Advanced", " Chapter 4 Containerization 4.1 Introduction A common problem observed during data analysis includes packages/libraries that are not compatible with specific R/Python software. Other times different project use specific versions of packages and the underlying R/Python versions. This leads to dependency hell which can be easily solved using virtual environments. A virtual environment is common to isolate the dependency requirements for specific projects which may rely on a specific R/Python version as well as specific versions of the software libraries. 4.1.1 R renv, packrat 4.1.2 Python Conda is useful package manager and can create virtual environments for pretty much anay programming language.1 4.1.3 Create a virtual environment install conda check conda version using: conda --version 4.1.3.1 with default python version conda create --name env1 conda activate env1 python --version 4.1.3.2 a specifc python version conda create --name env2 python=3.7 conda activate env2 python --version 4.1.4 install packages conda install numpy 4.1.5 exit virtual environment conda deactivate 4.2 Delete virtual environment conda env remove -n env1 conda env remove -n env2 Similar to how shipping containers carry material goods in an enclosed space, software containers consist of application related goods (e.g. files and dependencies) in an enclosed environment. Containerization ensure reproducibility by bundling the necessary resources required to run a given set of analyses, web application, pipelines etc. irrespective of the operation system (OS). Thus, containers can be run on any OS (e.g. Mac, Windows, Linux)2. Glossary: 4.3 Advanced https://docs.conda.io/en/latest/ https://stackoverflow.com/questions/50974960/whats-the-difference-between-docker-and-python-virtualenv "],["vc.html", "Chapter 5 Version Control 5.1 Introduction 5.2 Advanced", " Chapter 5 Version Control 5.1 Introduction 5.2 Advanced "],["pipelines.html", "Chapter 6 Pipelines 6.1 Introduction 6.2 Advanced", " Chapter 6 Pipelines 6.1 Introduction 6.2 Advanced "],["cicd.html", "Chapter 7 Continuous Integration and Continuous Delivery 7.1 Introduction 7.2 Advanced", " Chapter 7 Continuous Integration and Continuous Delivery 7.1 Introduction 7.2 Advanced "],["tesing.html", "Chapter 8 Testing 8.1 Introduction 8.2 Advanced", " Chapter 8 Testing 8.1 Introduction 8.2 Advanced "],["casestudy.html", "Chapter 9 Case Study 9.1 Introduction 9.2 Advanced", " Chapter 9 Case Study 9.1 Introduction 9.2 Advanced "],["references.html", "References", " References "]]
